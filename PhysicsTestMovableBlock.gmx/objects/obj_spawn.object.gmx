<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is the spawn manager that sets up the physics world and applies physics settings to each object.

//Create the physics world with a 32 pixel per meter ratio.
physics_world_create(1/32);
//Set gravity to 0 on the x axis (unaffected) and 4 on the y axis.
physics_world_gravity(0, 4);
//Tell the physics world to do each physics calculation 30 times per step.
physics_world_update_iterations(30);
//Tell the physics world to update 30 times per second (which is the same as our room speed, but it doesn't necessarily have to be. It CANNOT be lower than your room speed, so this is the slowest it can be for this example).
physics_world_update_speed(30);

//Create an instance of the player object at (16, 160) and store the ID to the variable "plyr".
plyr = instance_create(16, 160, obj_plyr);
//Create a physics fixture and store a reference to it in the variable "fix_plyr". This will be bound to the player instance so that the physics world can interact with it.
fix_plyr = physics_fixture_create();
//Set the box shape of fix_plyr to half the width (x) and half the height (y) of our player sprite. Since our player sprite is 32 x 32, this means that the half-width AND half-height are both 16.
physics_fixture_set_box_shape(fix_plyr, 16, 16);
//Set the density of fix_plyr to 3.
physics_fixture_set_density(fix_plyr, 3);
//Set the amount of friction applied to fix_plyr to 0.5. Friction is the amount of resistance caused by two material objects sliding against each other. It is ALWAYS a number between 0 and 1.
physics_fixture_set_friction(fix_plyr, 0.5);

//Bind the fixture "fix_plyr" to the object "plyr", giving it all of fix_plyr's attributes so that the physics world can now interact with the player.
physics_fixture_bind(fix_plyr, plyr);
//Destroy the fixture to avoid memory leaks.
physics_fixture_delete(fix_plyr);

//Create an instance of the movable block object at (352, 0) and store the ID to the variable "mov".
mov = instance_create(352, 0, obj_move);
//Create a physics fixture and store a reference to it in the variable "fix_mov". This will be bound to the movable block instance so that the physics world can interact with it.
fix_mov = physics_fixture_create();
//Set the box shape of fix_mov to half the width (x) and half the height (y) of our movable block sprite. The movable block is the same size as the player, so we once again need both half-width and half-height to be set to 16.
physics_fixture_set_box_shape(fix_mov, 16, 16);
//Set the density of fix_mov to 3.
physics_fixture_set_density(fix_mov, 3);
//Set the amount of friction applied to fix_mov to 1. Friction is the amount of resistance caused by two material objects sliding against each other. It is ALWAYS a number between 0 and 1.
physics_fixture_set_friction(fix_mov, 1);

//Bind the fixture "fix_mov" to the object "mov", giving it all of fix_mov's attributes so that the physics world can now interact with the movable block.
physics_fixture_bind(fix_mov, mov);
//Destroy the fixture to avoid memory leaks.
physics_fixture_delete(fix_mov);

//Since there are many blocks as opposed to one, the blocks are already placed in the room using the editor. 
//It is important that the blocks be drawn BEFORE this spawn manager so that they exist when the spawn manager is created and can be affected by this code.

//Create a physics fixture for the block and store a reference to it in the variable "fix_block". The blocks need to be able to be affected by the physics world too. :)
fix_block = physics_fixture_create();
//Set the box shape of fix_block to half the width (x) and half the height (y) of our block sprite. The block is the same size as the player, so we once again need both half-width and half-height to be set to 16.
physics_fixture_set_box_shape(fix_block, 16, 16);
//Set the density of fix_block to 0. This means that, in essence, it has infinite density. Since the block is immobile, it doesn't need a specific density.
physics_fixture_set_density(fix_block, 0);
//Since the block is immobile, friction is also unnecessary.

//For each instance of obj_block...
for (i = 0; i &lt; instance_number(obj_block); i += 1) {
    //...block = the instance of obj_block at place i...
    block = instance_find(obj_block, i);
    //...and fix_block is bound to that instance of block.
    physics_fixture_bind(fix_block, block);
}
//Destroy the fixture to avoid memory leaks.
physics_fixture_delete(fix_block);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
