<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar fntPixel;
fntPixel = font_add_sprite(sprFont, ord(" "), 0, 1)
globalvar fntLevel;
fntLevel = font_add_sprite(sprNumS, ord("."), 1, 2)
BM = instance_create(0, 0, objBattleManager)
lbar = instance_create(0,0, objLoadingGame)
trainer = instance_create(12, room_height-100, objTrainer)
trainervs = instance_create(room_width-87, 0, objTrainerVS)
lbar.visible = false
menu_option = 0
menu_submenu = 1
event = "wait"
handledget = true
background_visible[0] = true
lbar.visible = true
get[0] = http_get("http://" + global.host + "/request.php?rtype=getevent&amp;batid=" + string(global.BattleID))

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>get[0] = http_get("http://" + global.host + "/request.php?rtype=getevent&amp;batid=" + string(global.BattleID))
lbar.visible = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.myHP_D&gt;global.myHP then
{
    global.myHP_D-=0.5
}

if global.vsHP_D&gt;global.vsHP then
{
    global.vsHP_D-=0.5
}

if global.myXP_D&lt;global.myXP then
{
    global.myXP_D+=0.5
}

if global.vsXP_D&lt;global.vsXP then
{
    global.vsXP_D+=0.5
}

if global.myXP&gt;=global.myMaxXP then
{
    global.myXP = abs(global.myXP-global.myMaxXP)
    global.myXP_D = 0
    global.myLevel+=1
}

if global.vsXP&gt;=global.vsMaxXP then
{
    global.vsXP = abs(global.vsXP-global.vsMaxXP)
    global.vsXP_D = 0
    global.vsLevel+=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_map_find_value(async_load, "id") == get[0]
   {
   if ds_map_find_value(async_load, "status") &gt;= 0
      {
      handledget = true
      lbar.visible = false
      r_str = ds_map_find_value(async_load, "result");
      
      cmdA = string_extract(r_str, ":", 0)
      cmdB = string_lower(string_extract(r_str, ":", 1))
      cmdC = string_extract(r_str, ":", 2)
      cmdD = string_extract(r_str, ":", 3)
      
            
      //show_message(cmdA + cmdB)
      
      if cmdA = "TURN" then
      {
        if cmdB = global.playtype then
        {
        event = "myturn"
        }
        else
        {
        event = "otherturn"
        alarm[0] = room_speed
        }
      }
      else if cmdA = "atk" then
      {
        if cmdB != global.playtype then
        {
            global.myHP-=real(cmdC)
            global.vsXP += round(real(cmdD)*global.vsLevel/2)
            if global.myHP&lt;=0 then
            {
                global.myHP = 0;
                event = "ilost"
            }
            else event = "tookfightdmg"
        }
        else alarm[0] = room_speed
      }
      else alarm[0] = room_speed


      }
   else
      {
      alarm[0] = room_speed
      r_str = "null";
      }
   }

   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left)
draw_set_valign(fa_top)
draw_border(sprGUI_school, 0, 16, 28, 2, 1)
draw_set_font(fntPixel)

if event == "wait" then 
{
    draw_pixeltext(1, 17, "One moment..." , c_white, c_black, 0, 0)
}
else if event == "otherturn"
{
    draw_pixeltext(1, 17, global.vsName + string("#is making a move..") , c_white, c_black, 0, 0)
}
else if event == "tookfightdmg"
{
    draw_pixeltext(1, 17, string(global.vsName) + " used FIGHT!#You took damage." , c_white, c_black, 0, 0)
}
else if event == "farted"
{
    draw_pixeltext(1, 17, string(global.vsName) + " FARTED in#your face!" , c_white, c_black, 0, 0)
}
else if event == "burped"
{
    draw_pixeltext(1, 17, string(global.vsName) + " used BURP!" , c_white, c_black, 0, 0)
}
else if event == "iwon"
{
    draw_pixeltext(1, 17, string(global.vsName) + " fainted!" , c_white, c_black, 0, 0)
}
else if event == "ilost"
{
    draw_pixeltext(1, 17, string(global.myName) + " fainted!" , c_white, c_black, 0, 0)
}
else if event == "myturn"
{
    draw_pixeltext(1, 17, "What will#" + string_upper(string(global.myName)) + " do?" , c_white, c_black, 0, 0)
    draw_border(sprGUI_bluebor, 15, 16, 13, 2, 1)
    if menu_submenu == 1 then
    draw_menu(menu_option, "ATTK", "DEFND", "", "RUN", c_gray, c_blue)
    else if menu_submenu == 2
    draw_menu(menu_option, "HIT", "SCRTH", "BACK", "&gt;&gt;", c_gray, c_blue)
    else if menu_submenu == 3
    draw_menu(menu_option, "SHLD", "PROT", "BACK", "&gt;&gt;", c_gray, c_blue)
}

draw_set_color(make_color_rgb(230,210,150))
draw_border(sprGUI_blue, 17, 12, 11, 2, 1)
draw_pixeltext(18, 12, string(global.myName), c_white, c_black, 0, 3)
//draw_border(sprGUI_redbor, 0, 3, 12, 2, 1)
//draw_pixeltext(1, 4, "BIG BAG#24/7", c_red, c_white)
//draw_roundrect_color(0, 0, room_width/2, 32, c_gray, c_gray, false)
//draw_roundrect_color(0, 1, room_width/2, 32, c_dkgray, c_dkgray, false)

draw_hpbar(18, 14, real(global.myHP_D), real(global.myMaxHP), -2, -3)
draw_xpbar(18, 15, real(global.myXP_D), real(global.myMaxXP), -2, -3)

draw_set_font(fntLevel)
draw_pixeltext(26, 15, ":." + string(global.myLevel), c_white, c_black, -2, -2)
draw_pixeltext(26, 14, string(round(global.myHP_D)) + "/" + string(global.myMaxHP), c_white, c_black, -2, -3)

draw_border(sprGUI_gray, 0, 0, 11, 2, 1)
draw_set_font(fntPixel)
draw_pixeltext(1, 0, string(global.vsName), c_white, c_black, 0, 3)
draw_set_font(fntLevel)
draw_hpbar(1, 2, real(global.vsHP_D), real(global.vsMaxHP), -2, -3)
draw_xpbar(1, 3, real(global.vsXP_D), real(global.vsMaxXP), -2, -3)

draw_set_font(fntLevel)
draw_pixeltext(9, 3, ":." + string(global.vsLevel), c_white, c_black, -2, -2)
draw_pixeltext(9, 2, string(round(global.vsHP_D)) + "/" + string(global.vsMaxHP), c_white, c_black, -2, -3)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(menu_option)
{
    case 0: menu_option = 2; break;
    case 1: menu_option = 3; break;
    case 2: menu_option = 0; break;
    case 3: menu_option = 1; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(menu_option)
{
    case 0: menu_option = 1; break;
    case 1: menu_option = 0; break;
    case 2: menu_option = 3; break;
    case 3: menu_option = 2; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(menu_option)
{
    case 0: menu_option = 2; break;
    case 1: menu_option = 3; break;
    case 2: menu_option = 0; break;
    case 3: menu_option = 1; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(menu_option)
{
    case 0: menu_option = 1; break;
    case 1: menu_option = 0; break;
    case 2: menu_option = 3; break;
    case 3: menu_option = 2; break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if event == "myturn" then
{
    if menu_submenu == 2 or menu_submenu == 3
    {
        if menu_option == 2
        {
            menu_submenu = 1
        }
    }

    if menu_submenu == 1 then
    {
        if menu_option == 0 then
        {
        menu_submenu = 2
        }
        else if menu_option == 1 then
        {
        menu_submenu = 3
        }
    }
    else if menu_submenu == 2 then
    {
        if menu_option == 0 then
        {
        if instance_number(objMeter) == 0 then {
        powMeter = instance_create(room_width-128, room_height-66, objMeter)
        powMeter.atk_pow = 5
        
        }
        }
    }
}
else if event == "tookfightdmg" or event == "farted" or event == "burped"
{
    get[1] = http_get("http://" + global.host + "/request.php?rtype=setevent&amp;batid=" + string(global.BattleID) + "&amp;event=" + "TURN:" + global.playtype)
    event = "wait"
    lbar.visible = true
    alarm[0] = room_speed
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
